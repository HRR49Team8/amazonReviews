// ------------------------ Installing Postgres ------------------------ //

Get auth keys
  wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

  sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main" > /etc/apt/sources.list.d/PostgreSQL.list'

Update server
  sudo apt-get -y update

Install
  sudo apt-get install postgresql-10

Initial setup:
  - sudo passwd postgres (to set password)

  - sudo service postgresql start
    - To make an alias: alias pgstart='sudo service postgresql start'

  - sudo -u postgres psql
    - alias: alias runpg='sudo -u postgres psql'


CREATE USER student WITH PASSWORD 'student';
See postgresSchema.sql for other authentication.


// ------------------------ Installing Cassandra ------------------------ //

sudo apt install openjdk-8-jdk

wget -q -O - https://www.apache.org/dist/cassandra/KEYS | sudo apt-key add -

sudo sh -c 'echo "deb http://www.apache.org/dist/cassandra/debian 311x main" > /etc/apt/sources.list.d/cassandra.list'

sudo apt update
sudo apt install cassandra

Start scripts and aliases:
  sudo service cassandra start
  SET ALIAS: alias startcass='sudo service cassandra start'

  To run cassandra, simply type
  cqlsh

  If cassandra is not running, cqlsh command will result in connection refused.


// ------------------------ DB Query Notes ------------------------ //

I think if we actually have to implement anything client-side rather than just through straight server stress-tests, we'll want to make sure
that there's an 'anonymous' user that we can use to insert random reviews:
  insert into users(user_name, country, avatar) values('anonymous', 'United States', 'alex-avalos-vExD0Y0Aei0-unsplash.jpg');

// ------------------------ TESTING QUERIES ------------------------ //

For Postgres:

READ:
  SELECT r.product_id, r.user_id,
  r.overall_rating, r.review_date,
  r.headline, r.full_text, r.helpful, r.verified_purchase, r.product_photo,
  u.user_name, u.country, u.avatar
  FROM reviews AS r
  INNER JOIN users AS u
  ON r.user_id=u.id
  WHERE r.product_id=500;

CREATE:
  INSERT INTO reviews(product_id, product_photo, user_id, overall_rating, review_date, headline, full_text, helpful, verified_purchase)
  VALUES (10001, 'testurl', (SELECT id FROM users WHERE user_name = 'George43' limit 1), 5, '2020-05-09 20:59:35.341', 'some more filler text', 'some full text filler', 22, true);

UPDATE:
  UPDATE reviews SET overall_rating = 4, headline = 'hey', full_text = 'how is it going?' WHERE id = 200;

DELETE:
  DELETE FROM reviews WHERE id = 9000000;


For Cassandra:

CREATE:
INSERT INTO amazonreviews.reviews (id, product_id, product_photo, user_id, overall_rating, review_date, headline, full_text, helpful, verified_purchase)
VALUES (10000001, 10001, 'testurl', 55, 5, '2020-05-09 20:59:35.341', 'some more filler text', 'some full text filler', 22, 1);


READ:
  SELECT product_id, user_id,
  overall_rating, review_date,
  headline, full_text, helpful,
  verified_purchase, product_photo
  FROM amazonreviews.reviews
  WHERE product_id=5000;

UPDATE:
  UPDATE amazonreviews.reviews SET overall_rating = 4, headline = 'hey', full_text = 'how is it going?' WHERE id = 5000001 IF EXISTS;

DELETE:
  DELETE FROM amazonreviews.reviews WHERE id = 9000000 IF EXISTS;