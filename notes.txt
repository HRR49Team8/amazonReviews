// ------------------------ Installing Postgres ------------------------ //

wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main" > /etc/apt/sources.list.d/PostgreSQL.list'

sudo apt-get -y update
sudo apt-get install postgresql-10

sudo passwd postgres
  (to set password)

sudo service postgresql start
  - To make an alias: alias pgstart='sudo service postgresql start'

sudo -u postgres psql
  - alias: alias runpg='sudo -u postgres psql'


CREATE USER student WITH PASSWORD 'student';
See postgresSchema.sql for other authentication.


// ------------------------ Installing Cassandra ------------------------ //

sudo apt install openjdk-8-jdk

wget -q -O - https://www.apache.org/dist/cassandra/KEYS | sudo apt-key add -

sudo sh -c 'echo "deb http://www.apache.org/dist/cassandra/debian 311x main" > /etc/apt/sources.list.d/cassandra.list'

sudo apt update
sudo apt install cassandra

Start scripts and aliases:
  sudo service cassandra start
  SET ALIAS: alias startcass='sudo service cassandra start'

  To run cassandra, simply type
  cqlsh

  If cassandra is not running, cqlsh command will result in connection refused.


// ------------------------ DB Query Notes ------------------------ //

I think if we actually have to implement anything client-side rather than just through straight server stress-tests, we'll want to make sure
that there's an 'anonymous' user that we can use to insert random reviews:
  insert into users(user_name, country, avatar) values('anonymous', 'United States', 'alex-avalos-vExD0Y0Aei0-unsplash.jpg');

// ------------------------ TESTING QUERIES ------------------------ //

For Postgres:

READ:
  SELECT r.product_id, r.user_id,
  r.overall_rating, r.review_date,
  r.headline, r.full_text, r.helpful, r.verified_purchase, r.product_photo,
  u.user_name, u.country, u.avatar
  FROM reviews AS r
  INNER JOIN users AS u
  ON r.user_id=u.id
  WHERE r.product_id=500;

CREATE:
  INSERT INTO reviews(product_id, product_photo, user_id, overall_rating, review_date, headline, full_text, helpful, verified_purchase)
  VALUES (10001, 'testurl', (SELECT id FROM users WHERE user_name = 'George43' limit 1), 5, '2020-05-09 20:59:35.341', 'some more filler text', 'some full text filler', 22, true);

UPDATE:
  UPDATE reviews SET overall_rating = 4, headline = 'hey', full_text = 'how is it going?' WHERE id = 99994606 AND product_id = 999993;

DELETE:
  DELETE FROM reviews WHERE id = 9000000;


For Cassandra:

CREATE:
INSERT INTO amazonreviews.reviews (id, product_id, product_photo, user_id, overall_rating, review_date, headline, full_text, helpful, verified_purchase)
VALUES (10000001, 10001, 'testurl', 55, 5, '2020-05-09 20:59:35.341', 'some more filler text', 'some full text filler', 22, 1);


READ:
  SELECT product_id, user_id,
  overall_rating, review_date,
  headline, full_text, helpful,
  verified_purchase, product_photo
  FROM amazonreviews.reviews
  WHERE product_id=5000;

UPDATE:
  UPDATE amazonreviews.reviews SET overall_rating = 4, headline = 'hey', full_text = 'how is it going?' WHERE id = 5000001 IF EXISTS;

DELETE:
  DELETE FROM amazonreviews.reviews WHERE id = 9000000 IF EXISTS;


// --------------------------------- INITIALIZE WEB SERVER --------------------------------- //

AWS instructions.

Install node:
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash

. ~/.nvm/nvm.sh

nvm install node
nvm install 14
nvm alias default 14
  - (these are to use version 14 by default, which is stable.)

git clone https://github.com/HRR49Team8/amazonReviews.git
npm install

DATABASE:

SEE ABOVE SECTION FOR POSTGRES INSTALLATION INSTRUCTIONS.

To permit use by other instances within the VPC network...

1. Create a PostgreSQL security group rule for port 5432 (should be in the dropdown menu!)
2. In your DB instance, set password:

sudo -u postgres psql
postgres=#\password
  (will be prompted for password)

3. Edit pg_hba.conf AND postgresql.conf

sudo vim /etc/postgresql/10/main/pg_hba.conf
# Near bottom of file after local rules, add rule (allows remote access):
host    all             all             DBPRIVATEIPHERE/0          md5

sudo vim /etc/postgresql/10/main/postgresql.conf
# Change line 59 to listen to external requests:
listen_address='*'

4. Restart postgres

sudo /etc/init.d/postgresql restartâ€‹

5. Connect from private network!

sudo psql -h PRIVATEIP -U postgres

6. Install pv

sudo apt-get install pv

pm2:

npm install -g pm2
pm2 start "npm run start" --name proxy
pm2 save
pm2 startup



STRESS TESTING NOTES:


First run this line to establish a user for the sake of inserting reviews:
insert into users(user_name, country, avatar) values ('anonymous', 'the United States', 'https://hr-fec.s3.us-east-2.ama');


After every artillery test, you'll want to delete the reviews you added in. Example:
delete from reviews where product_id = 999993 and user_id = 1000000;

